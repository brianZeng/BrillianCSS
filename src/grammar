%lex
%option case-insensitive
nonascii	    [\200-\377]
unicode		    \\{h}{1,6}(\r\n|[ \t\r\n\f])?
escape		    {unicode}|\\[ -~\200-\377]
nmstart		    [_a-zA-Z]|{nonascii}|{escape}
nmchar		    {nmstart}|[0-9]
hexchar         [0-9a-fA-F]
key             {nmstart}("-"?{nmchar})*
Ident           "-"?{key}
num             (\d+(\.\d+)?)|(\.\d+)
var             "$"{nmstart}(('-'{nmstart})|{nmchar})*
string          (\"|\')[\s\S]*?(\1)
sltstart        {nmchar}|[\.#\*\>\+\-\&]|\d+\%
sltclass        \:\:|\:(?!=[^\{]*?[\)\;]{s}*[\}\;])
sltchar         {sltstart}|[\s>\+\~@\^\$\|\=\[\]\'\"\(\)\r\n\t\f]
nonslt          (\({s}*{var}{s}*\:)|\{|\,
selector        {sltstart}({sltchar}|{sltclass})*?(?={nonslt})
comment         \/\*[\s\S]*?\*\/|"//".*?[\r\n]
s               [\s\r\n\t\f]
%s INITIAL EXP EXT
%%
<*>{comment}                           /* ignore*/;
<*>"@treatas"                            return 'TREATAS';
<*>"@mixin"                              return 'MIXIN';
<*>"@media"                              this.begin("EXP");return 'MEDIA';
<*>"@include"                            return 'INCLUDE';
<*>"@sheetname"                          this.begin("EXP");return 'SHEET';
<*>"@extend"                             this.begin('EXT');return 'EXTENDS';
<*>\@(\-(webkit|moz|ms|o)\-)?keyframes   return 'KEYFRAMES';
<*>'->'{s}*{Ident}                       return 'POINTER';
<EXT>{sltstart}{sltchar}*?(?=[\;\}\{])   this.popState();return 'SELECTOR';
<*>{var}                                 return 'VAR';
<INITIAL>{selector}                      return 'SELECTOR';
<*>{s}                                  /* ignore*/;
<INITIAL>':'                           this.begin("EXP");return ':';
<INITIAL>\;+                           return ';';
<*>'{'                                 this.popState();return '{';
<*>'}'                                 this.popState();return '}';
<*>'('                                 return '(';
<*>')'                                 return ')';
<*>':'                                 return ':';
<EXP>','                               return 'IDENT';
<EXP>'and'                             return 'M_ADD';
<*>','                                 return ',';
<*>{num}(\%|\w+\b)?                    return 'NUMBER';
<EXP>\;+                           popUntil(this,'INITIAL');return ';';
<EXP>\@?(\"|\')[\s\S]*?(\1)           return "STRING";
<EXP>(url\(.*?\)|url\({string}\))     return "URL";
<EXP>{Ident}(?=\()                    return 'FUNCNAME';
<EXP>'+'                           return '+';
<EXP>'-'                           return '-';
<EXP>'*'                           return '*';
<EXP>'/'                           return '/';
<EXP>('#'{hexchar}+)|('!'\w+)      return 'IDENT';
<EXP>("not"|"only"){s}*{Ident}     return 'IDENT';
<*>{Ident}                         return 'IDENT';
<*><<EOF>>                         return "EOF";
/lex
%left COMBINE
%left ':'
%left list
%left '+' '-'
%left '*' '/'
%left UMINUS
%left GROUP
%start sheet
%%
var:
    VAR  POINTER       {$$=new Var($1,$2);}
   |VAR                {$$=new Var($1,yy.sheetName);}
   ;
exp:
    NUMBER          {$$=new Exp(new Length($1));}
    |var            {$$=new Exp($1);}
    |inlineFunc     {$$=new Exp($1);}
    | exp '+' exp   {$$= new Exp($1,$2,$3);}
    | exp '-' exp   {$$= new Exp($1,$2,$3);}
    | exp '*' exp   {$$= new Exp($1,$2,$3);}
    | exp '/' exp   {$$= new Exp($1,$2,$3);}
    | '-' exp %prec UMINUS {$$=new Exp(new Length('0'),'-',$2);}
    | '(' exp ')'   {$$=$2;}
    ;
inlineFunc:
      FUNCNAME '(' ')'           {$$=new InlineFunc($1);}
     |FUNCNAME '(' list ')'      {$$=new InlineFunc($1,$3.reduce());}
    ;
property:
      exp      %prec COMBINE      {$$=$1.resolve();}
      |STRING                     {$$=$1[0]=='@'? $1.substr(2,$1.length-3):$1;}
      |URL
      |IDENT                      {$$=Color.parse($1)||$1;}
      ;
list:
      property         {$$=new List($1);}
     |list property    {$1.push($2);}
     ;
assignPair:
      var ':' list    {$$={name:$1,value:$3.resolve()};}
     ;
assignList:
       assignPair     {$$={};$$[$1.name]=$1.value;}
      |assignList ';' assignPair {$1[$3.name]=$3.value}
	  |assignList ';'
      ;
defParamList:
      '(' ')'                       {$$={};}
     |'(' assignList ')'            {$$=$2;}
     ;
includeCall:
     INCLUDE var defParamList       {$$={name:$2.toString(),value:$3};}
    |INCLUDE var                    {$$={name:$2.toString(),value:{}};}
    ;
scopeBodyPart:
    IDENT ':' list               {$$={name:$1,value:$3.resolve(),type:'rule'};}
   |style                        {$$={type:'style',value:$1};}
   |includeCall                  {$1.type='include';}
   |EXTENDS   SELECTOR           {$$={type:'ext',name:$2};}
   |EXTENDS   SELECTOR POINTER   {$$={type:'ext',name:$2,sheetName:$3};}
   |scopeBodyPart ';'
   ;
scopeBody:
     scopeBodyPart                         {$$=new Scope().add($1)}
    |scopeBody scopeBodyPart               {$$=$1.add($2);}
    ;
scope:
    '{' scopeBody '}'               {$$=$2;}
    |defParamList '{' scopeBody '}' {$$=$3.addDefValues($1);}
    |defParamList '{' '}'           {$$=new Scope().addDefValues($1);}
    |'{' '}'                        {$$=new Scope()}
    ;
mixScope:
    MIXIN var scope              {$$={name:$2,value:$3}}
    ;
selectors:
       SELECTOR                  {$$=new List($1);}
      |selectors ',' SELECTOR    {$1.add($3);}
      ;
style:
      selectors scope              {$$=new Style($1,$2);}
     |MEDIA var scope              {$$=$3.asMediaQuery(null,$2);}
     |KEYFRAMES SELECTOR scope     {$$=$3.asKeyFrames($1,$2);}
    ;
m_exp:
    '(' IDENT ')'                  {$$={key:$2};}
    |'(' IDENT ':' list ')'        {$$={key:$2,value:$4};}
    ;
m_query:
     IDENT                         {$$=new MediaQuery($1);}
    |m_exp                         {$$=new MediaQuery('',$1);;}
    |m_query M_ADD m_exp           {$1.add($3);}
    ;
m_qlist:
     MEDIA m_query                    {$$=$2;}
    |m_qlist IDENT  m_query           {$1.merge($3);}
    ;
sheetPart:
     style           {$$={type:'style',value:$1}}
    |m_qlist scope                {$$={value:$2.asMediaQuery($1.reduce()),type:'style'};}
    |m_qlist TREATAS VAR scope    {$$={value:$4.asMediaQuery($1.reduce(),$3),type:'style'};}
    |m_qlist TREATAS VAR ';'      {$$={value:$1.reduce(),type:'media',key:$3};}
    |mixScope        {$1.type='mix';}
    |assignPair      {$1.type='var';}
    |sheetPart ';'
    ;
sheet:
     SHEET IDENT ';' sheetPart {$$=new Sheet($2).add($4);yy.sheetName=$2;}
    |SHEET IDENT sheetPart {$$=new Sheet($2).add($3);yy.sheetName=$2;}
    |sheetPart             {$$=new Sheet().add($1);yy.sheetName=ChangeSS.opt.defaultSheetName;}
    |SHEET IDENT ';' "EOF" {return new Sheet($2);}
    |sheet sheetPart       {$1.add($2);}
    |sheet "EOF"           {return $$=$1;}
    ;
%%
function popUntil(lexer,state){
  while(lexer.topState()!==state)
    lexer.popState();
}
