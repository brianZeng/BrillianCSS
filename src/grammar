%lex
%option case-insensitive
nonascii	    [\200-\377]
unicode		    \\{h}{1,6}(\r\n|[ \t\r\n\f])?
escape		    {unicode}|\\[ -~\200-\377]
nmstart		    [_a-z]|{nonascii}|{escape}
nmchar		    [_a-zA-Z0-9-]|{nonascii}|{escape}
hexchar         [0-9a-fA-F]
key             {nmstart}{nmchar}*
namestart       [_a-zA-Z]|{nonascii}|{escape}
namechar        [_a-zA-Z0-9]|{nonascii}|{escape}
name            {namestart}{namechar}*
Ident           "-"?{key}
num             (\d+(\.\d+)?)|(\.\d+)
var             "$"{name}
string          (\"|\')[\s\S]*?(\1)
sltstart        {nmchar}|[\.#\*\>\+]
sltclass        \:(\:+|\w+\-|\b\w+\b(?!=\())
sltchar         {sltstart}|[\s>\+\~@\^\$\|\=\[\]\'\"\(\)\r\n\t\f]
selector        {sltstart}({sltchar}|{sltclass})*?(?=(\({var}\:)|\{|\,)
comment         \/\*[\s\S]*?\*\/|"//".*?[\r\n]
s               [\s\r\n\t\f]
%s INITIAL EXP EXT
%%
<*>{comment}                           /* ignore*/;
<*>"@mixin"                              return 'MIXIN';
<*>"@media"                              this.begin("EXP");return 'MEDIA';
<*>"@include"                            return 'INCLUDE';
<*>"@sheetname"                          this.begin("EXP");return 'SHEET';
<*>"@extend"                             this.begin('EXT');return 'EXTENDS';
<*>'->'                                  this.begin("EXP");return '->';
<EXT>{sltstart}{sltchar}*?(?=[\;\}\{])   this.popState();return 'SELECTOR';
<*>{var}                                 return 'VAR';
<INITIAL>{selector}                      return 'SELECTOR';
<*>{s}                                  /* ignore*/;
<INITIAL>':'                           this.begin("EXP");return ':';
<INITIAL>\;+                           return ';';
<*>'{'                                 this.popState();return '{';
<*>'}'                                 this.popState();return '}';
<*>'('                                 return '(';
<*>')'                                 return ')';
<*>':'                                 return ':';
<EXP>','                               return 'IDENT';
<EXP>'and'                             return 'M_ADD';
<*>','                                 return ',';
<*>'&'\:*{selector}                    return '&';
<*>{num}(px|pc|px|in|cm|mm|deg|pi|em|ex|rad|s|\%)? return 'NUMBER';
<EXP>\;+                           popUntil(this,'INITIAL');return ';';
<EXP>(\"|\')[\s\S]*?(\1)           return "STRING";
<EXP>(url\(.*?\)|url\({string}\))  return "URL";
<EXP>'-'?{key}(?=\([^$])           return 'FUNCNAME';
<EXP>'+'                           return '+';
<EXP>'-'                           return '-';
<EXP>'*'                           return '*';
<EXP>'/'                           return '/';
<EXP>'#'{hexchar}+                 return 'IDENT';
<EXP>("not"|"only"){s}*{Ident}     return 'IDENT';
<*>{Ident}                         return 'IDENT';
<*><<EOF>>                         return "EOF";
/lex
%left COMBINE
%left ':'
%left list
%left '+' '-'
%left '*' '/'
%left UMINUS
%left GROUP
%start sheet
%%
var:
    VAR  '->' IDENT  {$$=new Var($1,$3);}
   |VAR                {$$=new Var($1);}
   ;
exp:
    NUMBER          {$$=new Exp(new Length($1));}
    |var            {$$=new Exp($1);}
    |inlineFunc     {$$=new Exp($1);}
    | exp '+' exp   {$$= new Exp($1,$2,$3);}
    | exp '-' exp   {$$= new Exp($1,$2,$3);}
    | exp '*' exp   {$$= new Exp($1,$2,$3);}
    | exp '/' exp   {$$= new Exp($1,$2,$3);}
    | '-' exp %prec UMINUS {$$=new Exp(new Length('0'),'-',$2);}
    | '(' exp ')'   {$$=$2;}
    ;
inlineFunc:
      FUNCNAME '(' ')'           {$$=new InlineFunc($1);}
     |FUNCNAME '(' list ')'      {$$=new InlineFunc($1,$3.reduce());}
    ;
property:
      exp      %prec COMBINE      {$$=$1.resolve();}
      |STRING
      |URL
      |IDENT
      ;
list:
      property         {$$=new List($1);}
     |list property    {$1.push($2);}
     ;
assignPair:
      var ':' list    {$$={name:$1,value:$3.resolve()};}
     ;
assignList:
       assignPair     {$$={};$$[$1.name]=$1.value}
      |assignList ';' assignPair {$1[$3.name]=$3.value}
	  |assignList ';'
      ;
defParamList:
      '(' ')'                       {$$={};}
     |'(' assignList ')'            {$$=$2;}
     ;
includeCall:
     INCLUDE var defParamList       {$$={name:$2.toString(),value:$3};}
    |INCLUDE var                    {$$={name:$2.toString(),value:{}};}
    ;
scopeBodyPart:
    IDENT ':' list               {$$={name:$1,value:$3.resolve(),type:'rule'};}
   |nestedStyle                  {$$={type:'style',value:$1};}
   |includeCall                  {$1.type='include';}
   |EXTENDS   SELECTOR           {$$={type:'ext',name:$2};}
   |EXTENDS   SELECTOR '->' IDENT{$$={type:'ext',name:$2,sheetName:$4};}
   |scopeBodyPart ';'
   ;
scopeBody:
     scopeBodyPart                         {$$=new Scope().add($1)}
    |scopeBody scopeBodyPart               {$$=$1.add($2);}
    ;
scope:
    '{' scopeBody '}'               {$$=$2;}
    |defParamList '{' scopeBody '}' {$$=$3.addDefValues($1);}
    |defParamList '{' '}'           {$$=new Scope().addDefValues($1);}
    ;
nestedStyle:
    '&' scope                    {$$=new Style($1,$2);}
    |style
    ;
mixScope:
    MIXIN var scope              {$$={name:$2,value:$3}}
    ;
selectors:
       SELECTOR                  {$$=new List($1);}
      |selectors ',' SELECTOR    {$1.add($3);}
      ;
style:
      selectors scope              {$$=new Style($1,$2);}
     |selectors '{' '}'            {$$=new Style($1);}
    ;
m_exp:
    '(' IDENT ')'                  {$$={key:$2};}
    |'(' IDENT ':' list ')'        {$$={key:$2,value:$4};}
    ;
m_query:
     IDENT                         {$$=new MediaQuery($1);}
    |FUNCNAME m_exp                {$$=new MediaQuery($1,$2);}
    |m_exp                         {$$=new MediaQuery('',$1);}
    |m_query M_ADD m_exp           {$1.add($3);}
    ;
m_qlist:
     MEDIA m_query                 {$$=$2;}
    |m_qlist ',' m_query           {$1.merge($3);}
    ;
m_start:
    m_qlist '{'                    {popUntil(yy.lexer,"INITIAL");$1.reduce();}
    ;
m_content:
     m_start                       {$$=[];$$.media=$1;}
    |m_content style               {$1.push($2);}
    ;
m_end:
     m_content '}'                 {$1.media.apply($1);}
    |m_end ';'
    ;
sheetPart:
     style          {$$={type:'style',value:$1}}
    |mixScope       {$1.type='mix';}
    |assignPair     {$1.type='var';}
    |sheetPart ';'
    ;
sheet:
     SHEET IDENT ';'     {$$=new Sheet($2);}
    |sheetPart           {$$=new Sheet().add($1);}
    |m_end               {$$=new Sheet().add($1,'style');}
    |sheet sheetPart     {$1.add($2);}
    |sheet m_end         {$1.add($2,'style');}
    |sheet "EOF"         {return $$=$1;}
    ;
%%
function popUntil(lexer,state){
  while(lexer.topState()!==state)
    lexer.popState();
}
